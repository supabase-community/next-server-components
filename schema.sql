/** 
* USERS
* Note: This table contains user data. Users should only be able to view and update their own data.
*/
create table users (
  -- UUID from auth.users
  id uuid references auth.users not null primary key,
  full_name text,
  avatar_url text
);
alter table users enable row level security;
create policy "Can view own user data." on users for select using (auth.uid() = id);
create policy "Can update own user data." on users for update using (auth.uid() = id);

/**
* This trigger automatically creates a user entry when a new user signs up via Supabase Auth.
*/ 
create function extensions.handle_new_user() 
returns trigger as $$
begin
  insert into public.users (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure extensions.handle_new_user();

/**
 * NOTES
 * Note: Stores the notes.
 */
create table notes (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  created_by uuid references public.users, -- todo: "not null" once auth is added.
  title text,
  body text
);
-- Enable this when security/logins is implemented
-- alter table notes enable row level security;
-- create policy "Everyone can see notes." on notes for select using (true);
-- create policy "Can insert own notes." on notes for insert with check (auth.uid() = id);
-- create policy "Can update own notes." on notes for update using (auth.uid() = id);

